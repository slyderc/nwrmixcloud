# Product Requirements Document: Mixcloud Show Description Updater

## Executive Summary

Build a cross-platform Go executable (MacOS and Windows 11) that automates the process of updating Mixcloud show descriptions with parsed .cue file data. The application will integrate with existing radio station workflows where Myriad play-out software uploads shows to Mixcloud, and then enhance those shows with detailed, filtered tracklists.

## Problem Statement

Radio stations using Myriad play-out software currently upload shows to Mixcloud with basic metadata and fixed descriptions. The standard .cue files generated during broadcast contain detailed track information, but this data is not utilized to create informative show descriptions. Manual updating is time-consuming and inconsistent.

### Current Workflow Gap
Myriad uploads shows to Mixcloud but cannot leverage the rich track data in .cue files to create detailed show descriptions. This results in generic descriptions that don't showcase the actual content played during the show.

## Objectives

### Primary Goals
- Automate the process of updating Mixcloud show descriptions with formatted tracklist data
- Parse .cue files to extract track information while filtering out non-music content
- Provide cross-platform compatibility for MacOS and Windows 11
- Integrate seamlessly with existing Myriad → Mixcloud workflow

### Success Metrics
- Successfully parse and filter .cue file data
- Update Mixcloud show descriptions via API
- Support configurable content filtering
- Execute reliably on both target platforms

## User Stories

### As a Radio Station DJ/Producer:
- I want my show descriptions to automatically include the tracks I played
- I want to exclude station IDs, bumpers, and ads from the public tracklist
- I want the process to work without manual intervention after the show is uploaded

### As a Radio Station Technical Administrator:
- I want to configure which content types are excluded from tracklists
- I want to manage API credentials securely
- I want to verify that show descriptions were updated successfully
- I want to be apprised of any errors or problems that occur with the process

## Technical Requirements

### Core Functionality

#### 1. Cue File Processing
- Parse standard CUE sheet format files
- Extract track metadata (artist, title, start time, genre)
- Apply configurable string matching/regex filtering to exclude unwanted content
- Generate tracklist in format: MM:SS - "Track Title" by Artist Name
- Ensure output fits within Mixcloud's description character limit (~1000 characters)
- Support command-line argument or config file setting for .cue file location

#### 2. Mixcloud API Integration
- Implement OAuth 2.0 authentication with automatic token refresh
- Locate shows using naming convention: "Show Name - M/D/YYYY" → "show-name-mdyyyy"
- Update show descriptions via POST requests
- Handle API rate limits and error responses
- Log success/failure to console for MVP

#### 3. Configuration Management
- Load configuration on application startup (one-shot execution)
- Support multi-station configurations
- OAuth credentials (client_id, client_secret, access_token, refresh_token)
- Configurable content filtering using string matching and/or regex:
  - Artist names to exclude
  - Track titles to exclude
  - Genre patterns to exclude
- .cue file location (configurable path or command-line argument)
- Station-specific settings

#### 4. Cross-Platform Support
- Build native executables for MacOS and Windows 11 (no Linux required)
- Handle platform-specific file path conventions
- Ensure consistent behavior across platforms
- Primary deployment target: Windows 11 (Myriad host system)

### Technical Specifications

#### Input Requirements
- .cue files generated by Myriad play-out software
- Configuration file with OAuth credentials and filtering rules
- Show identifier or naming convention for Mixcloud lookup

#### Output Requirements
- Updated Mixcloud show descriptions with formatted tracklists
- Logging of successful/failed operations
- Optional verification of description updates

#### Performance Requirements
- Process .cue files up to 4-hour show length
- Complete description updates within 30 seconds
- One-shot execution model (launched by Myriad after upload completion)
- No concurrency concerns due to sequential processing

### Security Requirements
- Store OAuth credentials securely in configuration file
- Validate API responses to prevent injection attacks
- Log operations without exposing sensitive data

## API Integration Details

### Mixcloud API Capabilities
- Full documentation: https://www.mixcloud.com/developers
- Show upload and metadata editing supported
- OAuth 2.0 authentication required
- Timestamped tracklists only available via web interface (not API)

### Authentication Flow
- Use existing OAuth 2.0 grant for Now Wave Radio
- Store access token in configuration file
- Handle token refresh if needed
- Implement proper error handling for authentication failures

## Configuration Specification

### Station Configuration
```toml
[station]
name = "Now Wave Radio"
mixcloud_username = "NowWaveRadio"

[oauth]
client_id = "your_client_id"
client_secret = "your_client_secret"
access_token = "your_access_token"
refresh_token = "your_refresh_token"

[filtering]
# String matching patterns (case-insensitive)
excluded_artists = ["Station ID", "Commercial Break", "Weather Update", "Now Wave Radio"]
excluded_titles = ["Station Bumper", "Air Check", "Advertisement"]

# Regex patterns for advanced filtering
excluded_artist_patterns = ["^Station.*", ".*Commercial.*"]
excluded_title_patterns = ["^Bumper.*", ".*Ad.*"]

[paths]
cue_file_directory = "C:\\Myriad\\Data\\Media"

[logging]
level = "INFO"  # Future enhancement
file_path = ""  # Future enhancement - empty means console only
```

## Workflow Integration

### Current Workflow
1. DJ hosts live show
2. Myriad generates .cue file during broadcast
3. Myriad uploads show audio, artwork, tags, and basic description to Mixcloud

### Enhanced Workflow
1. DJ hosts live show
2. Myriad generates standard .cue file during broadcast
3. Myriad uploads show audio, artwork, tags, and basic description to Mixcloud
4. **Myriad launches Go executable with .cue file path as argument**
5. **Go application parses .cue file, applies filtering, and updates Mixcloud show description**
6. **Application logs results to console and terminates**

## Development Phases

### Phase 1: MVP Development
- Basic .cue file parsing
- Mixcloud API integration with OAuth
- Configuration file management
- Simple content filtering
- Cross-platform executable builds

### Phase 2: Testing and Validation
- Manual verification workflows
- Automated testing of API updates
- Error handling and logging
- Performance optimization

### Phase 3: Enhancement and Deployment
- Advanced filtering options
- Batch processing capabilities
- Production deployment and monitoring

## Command-Line Interface

### Usage Patterns
```bash
# Basic usage with config file
mixcloud-updater.exe --cue-file="path/to/show.cue" --config="config.toml"

# Alternative with show name for matching
mixcloud-updater.exe --cue-file="path/to/show.cue" --show-name="Sounds Like - Jeri-Rig & V-Dub - 6/26/2025"

# Dry run mode (future enhancement)
mixcloud-updater.exe --cue-file="path/to/show.cue" --dry-run
```

### Show Name to URL Mapping
- Input: "Sounds Like - Jeri-Rig & V-Dub - 6/26/2025"
- Output URL: "https://www.mixcloud.com/NowWaveRadio/sounds-like-jeri-rig-v-dub-6262025/"
- Transformation: lowercase, replace spaces/special chars with hyphens, format date as MDYYYY

## Future Enhancement Opportunities

### Phase 2 Enhancements
- Template-based tracklist formatting ({{start_time}} - "{{title}}" by {{artist}})
- File-based logging with configurable levels (DEBUG, INFO, WARN, ERROR)
- Email notifications via SMTP relay
- Pushover integration for mobile notifications
- Dry-run mode for testing without API calls

### Phase 3 Enhancements
- AI-Generated Content via Myrcat API integration (Myrcat project details in ../myrcat_go/docs/README.md)
- Analytics integration for engagement tracking (possible Myrcat integration opportunity)
- Batch processing for multiple shows
- Integration with other streaming platforms

### Advanced Features
- Advanced regex filtering with negative lookbehind
- Multi-station deployment management
- Configuration validation and testing tools

## Acceptance Criteria

### Must Have
- Successfully parse .cue files from Myriad software
- Filter out configured content types (station IDs, ads, etc.)
- Update Mixcloud show descriptions via API
- Work on both MacOS and Windows 11
- Load configuration from external file

### Should Have
- Verification of successful updates
- Error logging and handling
- Configurable output formatting
- Performance within specified limits

### Could Have
- Batch processing of multiple shows
- Advanced filtering options
- Integration with existing monitoring systems

## Risk Assessment

### Technical Risks
- Mixcloud API changes or rate limiting
- Standard CUE file format variations from different Myriad versions
- OAuth token expiration during processing
- Show name to URL mapping edge cases (special characters, date formats)
- Network connectivity issues during API calls

### Mitigation Strategies
- Implement robust error handling with console logging
- Follow Mixcloud API best practices for OAuth token refresh
- Validate CUE file format before processing
- Comprehensive testing with actual Myriad-generated files
- Fallback mechanisms for URL mapping failures
- Graceful handling of network timeouts and API errors

## Success Criteria

The project will be considered successful when:
1. Shows uploaded by Myriad automatically receive enhanced descriptions
2. Content filtering effectively excludes non-music items
3. The system operates reliably without manual intervention
4. Both MacOS and Windows versions function identically
5. API integration handles errors gracefully and provides useful logging

## Timeline and Milestones

### Week 1-2: Foundation & Configuration
- Go project setup with standard library dependencies
- TOML configuration file parsing implementation
- Command-line argument handling (--cue-file, --config, --show-name)
- Basic CUE file parsing with standard format validation

### Week 3-4: Core Processing & API Integration
- Track filtering implementation (string matching and regex patterns)
- Tracklist formatting: "MM:SS - \"Track Title\" by Artist Name"
- Mixcloud API client with OAuth 2.0 auto-refresh
- Show name to URL mapping algorithm

### Week 5-6: Integration & Error Handling
- Console logging for success/failure scenarios
- Cross-platform testing (Windows 11 primary, MacOS secondary)
- Integration testing with actual Myriad-generated CUE files
- Edge case handling for show name mapping

### Week 7-8: Deployment & Validation
- Native executable builds for both platforms
- Myriad integration testing and workflow validation
- Performance testing with 4-hour show CUE files
- Documentation for station deployment and configuration
